{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mitchelldeyoung/GIT-REPOS/eth-todo-list/client/src/components/pages/account/Blockchain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { TODO_LIST_ABI, TODO_LIST_ADDRESS } from \"./config\";\nimport { Row } from \"react-bootstrap\";\nexport default function Blockchain() {\n  _s();\n\n  const [account, setAccount] = useState(\"\");\n  const [todoList, setTodoList] = useState([]);\n  const [taskCount, setTaskCount] = useState(0);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  async function loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const newtodoList = new web3.eth.Contract(TODO_LIST_ABI, TODO_LIST_ADDRESS);\n    setTodoList(newtodoList);\n    const newtaskCount = await newtodoList.methods.taskCount().call();\n    setTaskCount(newtaskCount);\n    let newTasks = [];\n\n    for (var i = 1; i <= newtaskCount; i++) {\n      const task = await newtodoList.methods.tasks(i).call();\n      newTasks.push(task);\n    }\n\n    setTasks(newTasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Your Contracts: \", account, /*#__PURE__*/_jsxDEV(Row, {\n      children: tasks.map((task, key) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"taskTemplate\",\n        className: \"checkbox\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"content\",\n            children: task.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Blockchain, \"8OqDoav5SB3tSFT6gMu0QqHHZFY=\");\n\n_c = Blockchain;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blockchain\");","map":{"version":3,"sources":["/Users/mitchelldeyoung/GIT-REPOS/eth-todo-list/client/src/components/pages/account/Blockchain.js"],"names":["React","useEffect","useState","Web3","TODO_LIST_ABI","TODO_LIST_ADDRESS","Row","Blockchain","account","setAccount","todoList","setTodoList","taskCount","setTaskCount","tasks","setTasks","loadBlockchainData","web3","givenProvider","accounts","eth","getAccounts","newtodoList","Contract","newtaskCount","methods","call","newTasks","i","task","push","map","key","content"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,UAAjD;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,kBAAf,GAAoC;AAClC,UAAMC,IAAI,GAAG,IAAId,IAAJ,CAASA,IAAI,CAACe,aAAL,IAAsB,uBAA/B,CAAb;AACA,UAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACAZ,IAAAA,UAAU,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAV;AACA,UAAMG,WAAW,GAAG,IAAIL,IAAI,CAACG,GAAL,CAASG,QAAb,CAAsBnB,aAAtB,EAAqCC,iBAArC,CAApB;AACAM,IAAAA,WAAW,CAACW,WAAD,CAAX;AACA,UAAME,YAAY,GAAG,MAAMF,WAAW,CAACG,OAAZ,CAAoBb,SAApB,GAAgCc,IAAhC,EAA3B;AACAb,IAAAA,YAAY,CAACW,YAAD,CAAZ;AACA,QAAIG,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,YAArB,EAAmCI,CAAC,EAApC,EAAwC;AACtC,YAAMC,IAAI,GAAG,MAAMP,WAAW,CAACG,OAAZ,CAAoBX,KAApB,CAA0Bc,CAA1B,EAA6BF,IAA7B,EAAnB;AACAC,MAAAA,QAAQ,CAACG,IAAT,CAAcD,IAAd;AACD;;AACDd,IAAAA,QAAQ,CAACY,QAAD,CAAR;AACD;;AACD,sBACE;AAAA,mCACmBnB,OADnB,eAEE,QAAC,GAAD;AAAA,gBACGM,KAAK,CAACiB,GAAN,CAAU,CAACF,IAAD,EAAOG,GAAP,kBACT;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,SAAS,EAAC,UAAxC;AAAA,+BACE;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,YAAA,SAAS,EAAC,SAAhB;AAAA,sBAA2BH,IAAI,CAACI;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAwDD,GAAxD;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAeD;;GAxCuBzB,U;;KAAAA,U","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { TODO_LIST_ABI, TODO_LIST_ADDRESS } from \"./config\";\nimport { Row } from \"react-bootstrap\";\n\nexport default function Blockchain() {\n  const [account, setAccount] = useState(\"\");\n\n  const [todoList, setTodoList] = useState([]);\n  const [taskCount, setTaskCount] = useState(0);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  async function loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const newtodoList = new web3.eth.Contract(TODO_LIST_ABI, TODO_LIST_ADDRESS);\n    setTodoList(newtodoList);\n    const newtaskCount = await newtodoList.methods.taskCount().call();\n    setTaskCount(newtaskCount);\n    let newTasks = [];\n    for (var i = 1; i <= newtaskCount; i++) {\n      const task = await newtodoList.methods.tasks(i).call();\n      newTasks.push(task);\n    }\n    setTasks(newTasks);\n  }\n  return (\n    <>\n      Your Contracts: {account}\n      <Row>\n        {tasks.map((task, key) => (\n          <div className=\"taskTemplate\" className=\"checkbox\" key={key}>\n            <label>\n              <input type=\"checkbox\" />\n              <span className=\"content\">{task.content}</span>\n            </label>\n          </div>\n        ))}\n      </Row>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}